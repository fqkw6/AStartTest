//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class StatusFlagWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(StatusFlag));
		L.RegVar("ATTACK_IMMUNE", get_ATTACK_IMMUNE, null);
		L.RegVar("FROZEN", get_FROZEN, null);
		L.RegVar("INVISIBLE", get_INVISIBLE, null);
		L.RegVar("INVULNERABLE", get_INVULNERABLE, null);
		L.RegVar("SILENCED", get_SILENCED, null);
		L.RegVar("STUNNED", get_STUNNED, null);
		L.RegVar("MAX_COUNT", get_MAX_COUNT, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ATTACK_IMMUNE(IntPtr L)
	{
		ToLua.Push(L, StatusFlag.ATTACK_IMMUNE);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FROZEN(IntPtr L)
	{
		ToLua.Push(L, StatusFlag.FROZEN);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_INVISIBLE(IntPtr L)
	{
		ToLua.Push(L, StatusFlag.INVISIBLE);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_INVULNERABLE(IntPtr L)
	{
		ToLua.Push(L, StatusFlag.INVULNERABLE);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SILENCED(IntPtr L)
	{
		ToLua.Push(L, StatusFlag.SILENCED);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_STUNNED(IntPtr L)
	{
		ToLua.Push(L, StatusFlag.STUNNED);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MAX_COUNT(IntPtr L)
	{
		ToLua.Push(L, StatusFlag.MAX_COUNT);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		StatusFlag o = (StatusFlag)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

