//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class RangeTypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(RangeType));
		L.RegVar("SINGLE", get_SINGLE, null);
		L.RegVar("CIRCLE", get_CIRCLE, null);
		L.RegVar("LINE", get_LINE, null);
		L.RegVar("SECTOR", get_SECTOR, null);
		L.RegVar("FULL", get_FULL, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SINGLE(IntPtr L)
	{
		ToLua.Push(L, RangeType.SINGLE);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CIRCLE(IntPtr L)
	{
		ToLua.Push(L, RangeType.CIRCLE);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LINE(IntPtr L)
	{
		ToLua.Push(L, RangeType.LINE);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SECTOR(IntPtr L)
	{
		ToLua.Push(L, RangeType.SECTOR);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FULL(IntPtr L)
	{
		ToLua.Push(L, RangeType.FULL);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		RangeType o = (RangeType)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

