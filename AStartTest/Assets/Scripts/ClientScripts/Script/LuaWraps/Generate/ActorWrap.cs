//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ActorWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Actor), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("OnInit", OnInit);
		L.RegFunction("OnUpdate", OnUpdate);
		L.RegFunction("OnTick", OnTick);
		L.RegFunction("OnDestroy", OnDestroy);
		L.RegFunction("GetBuildingLifeReducePerTurn", GetBuildingLifeReducePerTurn);
		L.RegFunction("GetProperty", GetProperty);
		L.RegFunction("UpdateProperty", UpdateProperty);
		L.RegFunction("GetMaxHealth", GetMaxHealth);
		L.RegFunction("IsRangeDmg", IsRangeDmg);
		L.RegFunction("IsFlyable", IsFlyable);
		L.RegFunction("IsEnemy", IsEnemy);
		L.RegFunction("IsBuilding", IsBuilding);
		L.RegFunction("IsFrozen", IsFrozen);
		L.RegFunction("IsInvulinerable", IsInvulinerable);
		L.RegFunction("IsSilenced", IsSilenced);
		L.RegFunction("IsStunned", IsStunned);
		L.RegFunction("GetDamage", GetDamage);
		L.RegFunction("GetMoveSpeed", GetMoveSpeed);
		L.RegFunction("GetAtkInterval", GetAtkInterval);
		L.RegFunction("GetAtkRange", GetAtkRange);
		L.RegFunction("GetSightRange", GetSightRange);
		L.RegFunction("GetAtkHitpoint", GetAtkHitpoint);
		L.RegFunction("Heal", Heal);
		L.RegFunction("SetModel", SetModel);
		L.RegFunction("SetPosition", SetPosition);
		L.RegFunction("CreateHealthBar", CreateHealthBar);
		L.RegFunction("ShowHealthBar", ShowHealthBar);
		L.RegFunction("SetupPhysic", SetupPhysic);
		L.RegFunction("SetShadow", SetShadow);
		L.RegFunction("SetAlpha", SetAlpha);
		L.RegFunction("AddAfterImage", AddAfterImage);
		L.RegFunction("CreateParticle", CreateParticle);
		L.RegFunction("RemoveParticle", RemoveParticle);
		L.RegFunction("CreateModel", CreateModel);
		L.RegFunction("PrecacheSound", PrecacheSound);
		L.RegFunction("PlaySound", PlaySound);
		L.RegFunction("StopSound", StopSound);
		L.RegFunction("SetInvisible", SetInvisible);
		L.RegFunction("MorphTo", MorphTo);
		L.RegFunction("Reborn", Reborn);
		L.RegFunction("Taunt", Taunt);
		L.RegFunction("PlayAttack", PlayAttack);
		L.RegFunction("ShowTrail", ShowTrail);
		L.RegFunction("HideTrail", HideTrail);
		L.RegFunction("IsPlayingAnimation", IsPlayingAnimation);
		L.RegFunction("GetCurrentAnimationLength", GetCurrentAnimationLength);
		L.RegFunction("IsCurrentAnimationFinish", IsCurrentAnimationFinish);
		L.RegFunction("PlayAnimation", PlayAnimation);
		L.RegFunction("Preview", Preview);
		L.RegFunction("Deploy", Deploy);
		L.RegFunction("Idle", Idle);
		L.RegFunction("MoveToPosition", MoveToPosition);
		L.RegFunction("MoveToTarget", MoveToTarget);
		L.RegFunction("TurnToTarget", TurnToTarget);
		L.RegFunction("Knockback", Knockback);
		L.RegFunction("AddBuff", AddBuff);
		L.RegFunction("GetBuff", GetBuff);
		L.RegFunction("RemoveBuff", RemoveBuff);
		L.RegFunction("ClearBuff", ClearBuff);
		L.RegFunction("HasBuff", HasBuff);
		L.RegFunction("SetStatus", SetStatus);
		L.RegFunction("CheckStatus", CheckStatus);
		L.RegFunction("FindTarget", FindTarget);
		L.RegFunction("FindTargets", FindTargets);
		L.RegFunction("SetCollisionEnable", SetCollisionEnable);
		L.RegFunction("CallFunction", CallFunction);
		L.RegFunction("StartThink", StartThink);
		L.RegFunction("SetMoveEffect", SetMoveEffect);
		L.RegFunction("GetSummonID", GetSummonID);
		L.RegFunction("GetSummonLevel", GetSummonLevel);
		L.RegFunction("GetSummonNumber", GetSummonNumber);
		L.RegFunction("GetSummonPauseTime", GetSummonPauseTime);
		L.RegFunction("GetBuildingLifeDuration", GetBuildingLifeDuration);
		L.RegFunction("PauseFSM", PauseFSM);
		L.RegFunction("ResumeFSM", ResumeFSM);
		L.RegFunction("ScanTarget", ScanTarget);
		L.RegFunction("ProcessBuilding", ProcessBuilding);
		L.RegFunction("SetProjectileSpawnPoint", SetProjectileSpawnPoint);
		L.RegFunction("OnModelChanged", OnModelChanged);
		L.RegFunction("OnSpawn", OnSpawn);
		L.RegFunction("OnHit", OnHit);
		L.RegFunction("OnHeal", OnHeal);
		L.RegFunction("OnTakeDamage", OnTakeDamage);
		L.RegFunction("OnDeath", OnDeath);
		L.RegFunction("OnShieldBreak", OnShieldBreak);
		L.RegFunction("ClearEvent", ClearEvent);
		L.RegFunction("AddEventListener", AddEventListener);
		L.RegFunction("RemoveEventListener", RemoveEventListener);
		L.RegFunction("TriggerEvent", TriggerEvent);
		L.RegFunction("AddTimer", AddTimer);
		L.RegFunction("RemoveTimer", RemoveTimer);
		L.RegFunction("RemoveAllTimer", RemoveAllTimer);
		L.RegFunction("AddFrameEvent", AddFrameEvent);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("UserID", get_UserID, set_UserID);
		L.RegVar("EntityID", get_EntityID, set_EntityID);
		L.RegVar("ConfigID", get_ConfigID, set_ConfigID);
		L.RegVar("Level", get_Level, set_Level);
		L.RegVar("NeedToRemove", get_NeedToRemove, set_NeedToRemove);
		L.RegVar("Model", get_Model, set_Model);
		L.RegVar("OnActorDeath", get_OnActorDeath, set_OnActorDeath);
		L.RegVar("Projectile", get_Projectile, set_Projectile);
		L.RegVar("ProjectileSpeed", get_ProjectileSpeed, set_ProjectileSpeed);
		L.RegVar("ProjectileGravity", get_ProjectileGravity, set_ProjectileGravity);
		L.RegVar("ProjectileTrack", get_ProjectileTrack, set_ProjectileTrack);
		L.RegVar("ProjectileSpawnPoint", get_ProjectileSpawnPoint, set_ProjectileSpawnPoint);
		L.RegVar("MultipleProjectiles", get_MultipleProjectiles, set_MultipleProjectiles);
		L.RegVar("ProjectilesFormation", get_ProjectilesFormation, set_ProjectilesFormation);
		L.RegVar("HealthBarOffsetY", get_HealthBarOffsetY, set_HealthBarOffsetY);
		L.RegVar("FlyingHeight", get_FlyingHeight, set_FlyingHeight);
		L.RegVar("AtkAnimation", get_AtkAnimation, set_AtkAnimation);
		L.RegVar("MoveAnimation", get_MoveAnimation, set_MoveAnimation);
		L.RegVar("CanBeTarget", get_CanBeTarget, set_CanBeTarget);
		L.RegVar("Position", get_Position, set_Position);
		L.RegVar("AttackerCount", get_AttackerCount, set_AttackerCount);
		L.RegVar("CastTarget", get_CastTarget, set_CastTarget);
		L.RegVar("CastPosition", get_CastPosition, set_CastPosition);
		L.RegVar("TargetPosition", get_TargetPosition, set_TargetPosition);
		L.RegVar("RebornPosition", get_RebornPosition, set_RebornPosition);
		L.RegVar("TargetAggro", get_TargetAggro, set_TargetAggro);
		L.RegVar("TargetPursuing", get_TargetPursuing, set_TargetPursuing);
		L.RegVar("TargetAttacking", get_TargetAttacking, set_TargetAttacking);
		L.RegVar("PreviewOffset", get_PreviewOffset, set_PreviewOffset);
		L.RegVar("IsSummoned", get_IsSummoned, set_IsSummoned);
		L.RegVar("IsIllusion", get_IsIllusion, set_IsIllusion);
		L.RegVar("IsDummy", get_IsDummy, set_IsDummy);
		L.RegVar("Data", get_Data, set_Data);
		L.RegVar("BaseData", get_BaseData, set_BaseData);
		L.RegVar("BuffData", get_BuffData, set_BuffData);
		L.RegVar("Cfg", get_Cfg, null);
		L.RegVar("CurrentHP", get_CurrentHP, set_CurrentHP);
		L.RegVar("CurrentShield", get_CurrentShield, set_CurrentShield);
		L.RegVar("IsPause", get_IsPause, set_IsPause);
		L.RegVar("IsDead", get_IsDead, set_IsDead);
		L.RegVar("AnimationSpeed", get_AnimationSpeed, set_AnimationSpeed);
		L.RegVar("IsPauseAnimation", get_IsPauseAnimation, set_IsPauseAnimation);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnInit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			obj.OnInit();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnUpdate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.OnUpdate(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnTick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			obj.OnTick();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDestroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			obj.OnDestroy();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBuildingLifeReducePerTurn(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int o = obj.GetBuildingLifeReducePerTurn(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetProperty(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Actor), typeof(PropertyType)))
			{
				Actor obj = (Actor)ToLua.ToObject(L, 1);
				PropertyType arg0 = (PropertyType)ToLua.ToObject(L, 2);
				int o = obj.GetProperty(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(Actor), typeof(PropertyType), typeof(PropertyType)))
			{
				Actor obj = (Actor)ToLua.ToObject(L, 1);
				PropertyType arg0 = (PropertyType)ToLua.ToObject(L, 2);
				PropertyType arg1 = (PropertyType)ToLua.ToObject(L, 3);
				int o = obj.GetProperty(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Actor.GetProperty");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateProperty(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			obj.UpdateProperty();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMaxHealth(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			int o = obj.GetMaxHealth();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsRangeDmg(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			bool o = obj.IsRangeDmg();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsFlyable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			bool o = obj.IsFlyable();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsEnemy(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(Actor)))
			{
				Actor obj = (Actor)ToLua.ToObject(L, 1);
				bool o = obj.IsEnemy();
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Actor), typeof(Actor)))
			{
				Actor obj = (Actor)ToLua.ToObject(L, 1);
				Actor arg0 = (Actor)ToLua.ToObject(L, 2);
				bool o = obj.IsEnemy(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Actor.IsEnemy");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsBuilding(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			bool o = obj.IsBuilding();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsFrozen(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			bool o = obj.IsFrozen();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsInvulinerable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			bool o = obj.IsInvulinerable();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsSilenced(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			bool o = obj.IsSilenced();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsStunned(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			bool o = obj.IsStunned();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDamage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			int o = obj.GetDamage();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMoveSpeed(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			float o = obj.GetMoveSpeed();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAtkInterval(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			int o = obj.GetAtkInterval();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAtkRange(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			int o = obj.GetAtkRange();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSightRange(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			int o = obj.GetSightRange();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAtkHitpoint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			int o = obj.GetAtkHitpoint();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Heal(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Actor arg1 = (Actor)ToLua.CheckUnityObject(L, 3, typeof(Actor));
			obj.Heal(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetModel(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Actor), typeof(UnityEngine.GameObject)))
			{
				Actor obj = (Actor)ToLua.ToObject(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.ToObject(L, 2);
				obj.SetModel(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Actor), typeof(string)))
			{
				Actor obj = (Actor)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				obj.SetModel(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Actor.SetModel");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.SetPosition(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateHealthBar(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			string arg0 = ToLua.CheckString(L, 2);
			obj.CreateHealthBar(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowHealthBar(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			obj.ShowHealthBar();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetupPhysic(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			obj.SetupPhysic();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetShadow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetShadow(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAlpha(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.SetAlpha(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddAfterImage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			obj.AddAfterImage();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateParticle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			string arg0 = ToLua.CheckString(L, 2);
			AttachType arg1 = (AttachType)ToLua.CheckObject(L, 3, typeof(AttachType));
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 4);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
			float arg4 = (float)LuaDLL.luaL_checknumber(L, 6);
			obj.CreateParticle(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveParticle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			string arg0 = ToLua.CheckString(L, 2);
			obj.RemoveParticle(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateModel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
			obj.CreateModel(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PrecacheSound(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			string arg0 = ToLua.CheckString(L, 2);
			obj.PrecacheSound(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlaySound(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			string arg0 = ToLua.CheckString(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.PlaySound(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopSound(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			string arg0 = ToLua.CheckString(L, 2);
			obj.StopSound(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetInvisible(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetInvisible(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MorphTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			obj.MorphTo();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reborn(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			obj.Reborn();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Taunt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			obj.Taunt();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayAttack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			Actor arg0 = (Actor)ToLua.CheckUnityObject(L, 2, typeof(Actor));
			obj.PlayAttack(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowTrail(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			obj.ShowTrail();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HideTrail(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			obj.HideTrail();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsPlayingAnimation(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.IsPlayingAnimation(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCurrentAnimationLength(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			float o = obj.GetCurrentAnimationLength();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsCurrentAnimationFinish(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			bool o = obj.IsCurrentAnimationFinish();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayAnimation(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			string arg0 = ToLua.CheckString(L, 2);
			obj.PlayAnimation(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Preview(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			obj.Preview();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Deploy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			obj.Deploy();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Idle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			obj.Idle();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MoveToPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.MoveToPosition(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MoveToTarget(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			Actor arg0 = (Actor)ToLua.CheckUnityObject(L, 2, typeof(Actor));
			obj.MoveToTarget(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TurnToTarget(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.TurnToTarget(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Knockback(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.Knockback(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddBuff(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			Skill arg2 = (Skill)ToLua.CheckObject(L, 4, typeof(Skill));
			bool arg3 = LuaDLL.luaL_checkboolean(L, 5);
			obj.AddBuff(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBuff(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			string arg0 = ToLua.CheckString(L, 2);
			Buff o = obj.GetBuff(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveBuff(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			string arg0 = ToLua.CheckString(L, 2);
			obj.RemoveBuff(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearBuff(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			obj.ClearBuff();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasBuff(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.HasBuff(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetStatus(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			StatusFlag arg0 = (StatusFlag)ToLua.CheckObject(L, 2, typeof(StatusFlag));
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.SetStatus(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckStatus(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			StatusFlag arg0 = (StatusFlag)ToLua.CheckObject(L, 2, typeof(StatusFlag));
			bool o = obj.CheckStatus(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindTarget(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			TeamFlag arg1 = (TeamFlag)ToLua.CheckObject(L, 3, typeof(TeamFlag));
			TargetFlag arg2 = (TargetFlag)ToLua.CheckObject(L, 4, typeof(TargetFlag));
			Actor o = obj.FindTarget(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindTargets(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			TeamFlag arg1 = (TeamFlag)ToLua.CheckObject(L, 3, typeof(TeamFlag));
			TargetFlag arg2 = (TargetFlag)ToLua.CheckObject(L, 4, typeof(TargetFlag));
			Actor[] o = obj.FindTargets(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetCollisionEnable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetCollisionEnable(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CallFunction(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			string arg0 = ToLua.CheckString(L, 2);
			object[] arg1 = ToLua.ToParamsObject(L, 3, count - 2);
			object[] o = obj.CallFunction(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartThink(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.StartThink(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetMoveEffect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			string arg0 = ToLua.CheckString(L, 2);
			obj.SetMoveEffect(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSummonID(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			int o = obj.GetSummonID();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSummonLevel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			int o = obj.GetSummonLevel();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSummonNumber(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			int o = obj.GetSummonNumber();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSummonPauseTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			int o = obj.GetSummonPauseTime();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBuildingLifeDuration(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			int o = obj.GetBuildingLifeDuration();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PauseFSM(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			obj.PauseFSM();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResumeFSM(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			obj.ResumeFSM();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ScanTarget(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			Actor o = obj.ScanTarget();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ProcessBuilding(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			obj.ProcessBuilding();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetProjectileSpawnPoint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.SetProjectileSpawnPoint(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnModelChanged(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			obj.OnModelChanged();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnSpawn(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			obj.OnSpawn();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnHit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.OnHit(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnHeal(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.OnHeal(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnTakeDamage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.OnTakeDamage(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDeath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			obj.OnDeath();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnShieldBreak(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			obj.OnShieldBreak();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			obj.ClearEvent();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddEventListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			string arg0 = ToLua.CheckString(L, 2);
			System.Action arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action)ToLua.CheckObject(L, 3, typeof(System.Action));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action), func) as System.Action;
			}

			obj.AddEventListener(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveEventListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			string arg0 = ToLua.CheckString(L, 2);
			System.Action arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action)ToLua.CheckObject(L, 3, typeof(System.Action));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action), func) as System.Action;
			}

			obj.RemoveEventListener(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TriggerEvent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Actor), typeof(string)))
			{
				Actor obj = (Actor)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				obj.TriggerEvent(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(Actor), typeof(string), typeof(object)))
			{
				Actor obj = (Actor)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				obj.TriggerEvent(arg0, arg1);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(Actor), typeof(string), typeof(object), typeof(object)))
			{
				Actor obj = (Actor)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				object arg2 = ToLua.ToVarObject(L, 4);
				obj.TriggerEvent(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Actor.TriggerEvent");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddTimer(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(Actor), typeof(int), typeof(TimerController.TimerHandler), typeof(bool)))
			{
				Actor obj = (Actor)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				TimerController.TimerHandler arg1 = null;
				LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

				if (funcType3 != LuaTypes.LUA_TFUNCTION)
				{
					 arg1 = (TimerController.TimerHandler)ToLua.ToObject(L, 3);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 3);
					arg1 = DelegateFactory.CreateDelegate(typeof(TimerController.TimerHandler), func) as TimerController.TimerHandler;
				}

				bool arg2 = LuaDLL.lua_toboolean(L, 4);
				int o = obj.AddTimer(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(Actor), typeof(string), typeof(object), typeof(float)))
			{
				Actor obj = (Actor)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				obj.AddTimer(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Actor.AddTimer");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveTimer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.RemoveTimer(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveAllTimer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			obj.RemoveAllTimer();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddFrameEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Actor obj = (Actor)ToLua.CheckObject(L, 1, typeof(Actor));
			System.Action arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action)ToLua.CheckObject(L, 2, typeof(System.Action));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action), func) as System.Action;
			}

			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.AddFrameEvent(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UserID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			long ret = obj.UserID;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index UserID on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EntityID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			long ret = obj.EntityID;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index EntityID on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ConfigID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			int ret = obj.ConfigID;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ConfigID on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Level(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			int ret = obj.Level;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Level on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NeedToRemove(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			bool ret = obj.NeedToRemove;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index NeedToRemove on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Model(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			UnityEngine.GameObject ret = obj.Model;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Model on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnActorDeath(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			System.Action<Actor> ret = obj.OnActorDeath;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnActorDeath on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Projectile(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			string ret = obj.Projectile;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Projectile on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ProjectileSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			int ret = obj.ProjectileSpeed;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ProjectileSpeed on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ProjectileGravity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			int ret = obj.ProjectileGravity;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ProjectileGravity on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ProjectileTrack(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			bool ret = obj.ProjectileTrack;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ProjectileTrack on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ProjectileSpawnPoint(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			UnityEngine.Transform ret = obj.ProjectileSpawnPoint;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ProjectileSpawnPoint on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MultipleProjectiles(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			int ret = obj.MultipleProjectiles;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MultipleProjectiles on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ProjectilesFormation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			ProjectileFormation ret = obj.ProjectilesFormation;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ProjectilesFormation on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HealthBarOffsetY(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			float ret = obj.HealthBarOffsetY;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index HealthBarOffsetY on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FlyingHeight(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			float ret = obj.FlyingHeight;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index FlyingHeight on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AtkAnimation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			string ret = obj.AtkAnimation;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index AtkAnimation on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MoveAnimation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			string ret = obj.MoveAnimation;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MoveAnimation on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CanBeTarget(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			bool ret = obj.CanBeTarget;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CanBeTarget on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			UnityEngine.Vector3 ret = obj.Position;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Position on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AttackerCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			int ret = obj.AttackerCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index AttackerCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CastTarget(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			Actor ret = obj.CastTarget;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CastTarget on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CastPosition(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			UnityEngine.Vector3 ret = obj.CastPosition;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CastPosition on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TargetPosition(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			UnityEngine.Vector3 ret = obj.TargetPosition;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TargetPosition on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RebornPosition(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			UnityEngine.Vector3 ret = obj.RebornPosition;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index RebornPosition on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TargetAggro(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			Actor ret = obj.TargetAggro;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TargetAggro on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TargetPursuing(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			Actor ret = obj.TargetPursuing;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TargetPursuing on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TargetAttacking(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			Actor ret = obj.TargetAttacking;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TargetAttacking on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PreviewOffset(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			UnityEngine.Vector3 ret = obj.PreviewOffset;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index PreviewOffset on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsSummoned(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			bool ret = obj.IsSummoned;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsSummoned on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsIllusion(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			bool ret = obj.IsIllusion;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsIllusion on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsDummy(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			bool ret = obj.IsDummy;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsDummy on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Data(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			System.Collections.Generic.Dictionary<PropertyType,int> ret = obj.Data;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Data on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BaseData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			System.Collections.Generic.Dictionary<PropertyType,int> ret = obj.BaseData;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index BaseData on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BuffData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			System.Collections.Generic.Dictionary<PropertyType,int> ret = obj.BuffData;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index BuffData on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Cfg(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			CardsAttributeConfig ret = obj.Cfg;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Cfg on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CurrentHP(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			int ret = obj.CurrentHP;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CurrentHP on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CurrentShield(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			int ret = obj.CurrentShield;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CurrentShield on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsPause(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			bool ret = obj.IsPause;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsPause on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsDead(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			bool ret = obj.IsDead;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsDead on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AnimationSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			float ret = obj.AnimationSpeed;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index AnimationSpeed on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsPauseAnimation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			bool ret = obj.IsPauseAnimation;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsPauseAnimation on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UserID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			long arg0 = (long)LuaDLL.luaL_checknumber(L, 2);
			obj.UserID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index UserID on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_EntityID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			long arg0 = (long)LuaDLL.luaL_checknumber(L, 2);
			obj.EntityID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index EntityID on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ConfigID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.ConfigID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ConfigID on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Level(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.Level = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Level on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_NeedToRemove(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.NeedToRemove = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index NeedToRemove on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Model(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.GameObject));
			obj.Model = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Model on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnActorDeath(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			System.Action<Actor> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<Actor>)ToLua.CheckObject(L, 2, typeof(System.Action<Actor>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<Actor>), func) as System.Action<Actor>;
			}

			obj.OnActorDeath = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnActorDeath on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Projectile(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Projectile = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Projectile on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ProjectileSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.ProjectileSpeed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ProjectileSpeed on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ProjectileGravity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.ProjectileGravity = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ProjectileGravity on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ProjectileTrack(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.ProjectileTrack = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ProjectileTrack on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ProjectileSpawnPoint(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Transform));
			obj.ProjectileSpawnPoint = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ProjectileSpawnPoint on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MultipleProjectiles(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.MultipleProjectiles = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MultipleProjectiles on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ProjectilesFormation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			ProjectileFormation arg0 = (ProjectileFormation)ToLua.CheckObject(L, 2, typeof(ProjectileFormation));
			obj.ProjectilesFormation = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ProjectilesFormation on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_HealthBarOffsetY(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.HealthBarOffsetY = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index HealthBarOffsetY on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_FlyingHeight(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.FlyingHeight = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index FlyingHeight on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AtkAnimation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.AtkAnimation = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index AtkAnimation on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MoveAnimation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.MoveAnimation = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MoveAnimation on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CanBeTarget(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.CanBeTarget = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CanBeTarget on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.Position = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Position on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AttackerCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.AttackerCount = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index AttackerCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CastTarget(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			Actor arg0 = (Actor)ToLua.CheckUnityObject(L, 2, typeof(Actor));
			obj.CastTarget = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CastTarget on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CastPosition(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.CastPosition = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CastPosition on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TargetPosition(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.TargetPosition = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TargetPosition on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RebornPosition(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.RebornPosition = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index RebornPosition on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TargetAggro(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			Actor arg0 = (Actor)ToLua.CheckUnityObject(L, 2, typeof(Actor));
			obj.TargetAggro = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TargetAggro on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TargetPursuing(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			Actor arg0 = (Actor)ToLua.CheckUnityObject(L, 2, typeof(Actor));
			obj.TargetPursuing = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TargetPursuing on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TargetAttacking(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			Actor arg0 = (Actor)ToLua.CheckUnityObject(L, 2, typeof(Actor));
			obj.TargetAttacking = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TargetAttacking on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PreviewOffset(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.PreviewOffset = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index PreviewOffset on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsSummoned(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsSummoned = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsSummoned on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsIllusion(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsIllusion = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsIllusion on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsDummy(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsDummy = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsDummy on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Data(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			System.Collections.Generic.Dictionary<PropertyType,int> arg0 = (System.Collections.Generic.Dictionary<PropertyType,int>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<PropertyType,int>));
			obj.Data = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Data on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BaseData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			System.Collections.Generic.Dictionary<PropertyType,int> arg0 = (System.Collections.Generic.Dictionary<PropertyType,int>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<PropertyType,int>));
			obj.BaseData = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index BaseData on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BuffData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			System.Collections.Generic.Dictionary<PropertyType,int> arg0 = (System.Collections.Generic.Dictionary<PropertyType,int>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<PropertyType,int>));
			obj.BuffData = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index BuffData on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CurrentHP(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.CurrentHP = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CurrentHP on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CurrentShield(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.CurrentShield = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CurrentShield on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsPause(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsPause = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsPause on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsDead(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsDead = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsDead on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AnimationSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.AnimationSpeed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index AnimationSpeed on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsPauseAnimation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Actor obj = (Actor)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsPauseAnimation = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsPauseAnimation on a nil value" : e.Message);
		}
	}
}

