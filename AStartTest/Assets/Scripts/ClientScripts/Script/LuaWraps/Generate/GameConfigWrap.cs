//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameConfigWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GameConfig), typeof(System.Object));
		L.RegFunction("New", _CreateGameConfig);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("GAME_TIME", get_GAME_TIME, set_GAME_TIME);
		L.RegVar("DOUBLE_TIME", get_DOUBLE_TIME, set_DOUBLE_TIME);
		L.RegVar("OVER_TIME", get_OVER_TIME, set_OVER_TIME);
		L.RegVar("MAX_CARD_COUNT", get_MAX_CARD_COUNT, set_MAX_CARD_COUNT);
		L.RegVar("MAX_HANDCARD_COUNT", get_MAX_HANDCARD_COUNT, set_MAX_HANDCARD_COUNT);
		L.RegVar("GRID_CELL_X", get_GRID_CELL_X, set_GRID_CELL_X);
		L.RegVar("GRID_CELL_Y", get_GRID_CELL_Y, set_GRID_CELL_Y);
		L.RegVar("FRAME_INTERVAL", get_FRAME_INTERVAL, set_FRAME_INTERVAL);
		L.RegVar("START_MANA", get_START_MANA, set_START_MANA);
		L.RegVar("MANA_REGEN", get_MANA_REGEN, set_MANA_REGEN);
		L.RegVar("MANA_MUL", get_MANA_MUL, set_MANA_MUL);
		L.RegVar("MANA_MAX", get_MANA_MAX, set_MANA_MAX);
		L.RegVar("HP_LVL_MUL", get_HP_LVL_MUL, set_HP_LVL_MUL);
		L.RegVar("ATK_LVL_MUL", get_ATK_LVL_MUL, set_ATK_LVL_MUL);
		L.RegVar("KING_TOWER_ID", get_KING_TOWER_ID, set_KING_TOWER_ID);
		L.RegVar("TOWER_ID", get_TOWER_ID, set_TOWER_ID);
		L.RegVar("MIRROR_ID", get_MIRROR_ID, set_MIRROR_ID);
		L.RegVar("BASE_HERO_ID", get_BASE_HERO_ID, set_BASE_HERO_ID);
		L.RegVar("ARRIVE_DISTANCE", get_ARRIVE_DISTANCE, set_ARRIVE_DISTANCE);
		L.RegVar("ATTACK_INTERVAL", get_ATTACK_INTERVAL, set_ATTACK_INTERVAL);
		L.RegVar("MAX_PVE_HERO_COUNT", get_MAX_PVE_HERO_COUNT, set_MAX_PVE_HERO_COUNT);
		L.RegVar("MAX_HERO_STAR", get_MAX_HERO_STAR, set_MAX_HERO_STAR);
		L.RegVar("MAX_HERO_QUALITY", get_MAX_HERO_QUALITY, set_MAX_HERO_QUALITY);
		L.RegVar("MAX_SKILL_POINT", get_MAX_SKILL_POINT, set_MAX_SKILL_POINT);
		L.RegVar("SKILL_POINT_GET_INTERVAL", get_SKILL_POINT_GET_INTERVAL, set_SKILL_POINT_GET_INTERVAL);
		L.RegVar("SKILL_UNLOCK2", get_SKILL_UNLOCK2, set_SKILL_UNLOCK2);
		L.RegVar("SKILL_UNLOCK3", get_SKILL_UNLOCK3, set_SKILL_UNLOCK3);
		L.RegVar("SKILL_UNLOCK4", get_SKILL_UNLOCK4, set_SKILL_UNLOCK4);
		L.RegVar("SCREEN_WIDTH", get_SCREEN_WIDTH, set_SCREEN_WIDTH);
		L.RegVar("SCREEN_HEIGHT", get_SCREEN_HEIGHT, set_SCREEN_HEIGHT);
		L.RegVar("QUICK_LEVELUP_GOLD", get_QUICK_LEVELUP_GOLD, set_QUICK_LEVELUP_GOLD);
		L.RegVar("QUICK_LEVELUP_TIME", get_QUICK_LEVELUP_TIME, set_QUICK_LEVELUP_TIME);
		L.RegVar("QUICK_LEVELUP_FREE_TIME", get_QUICK_LEVELUP_FREE_TIME, set_QUICK_LEVELUP_FREE_TIME);
		L.RegVar("CITY_BUILDING_CANCEL_BACK", get_CITY_BUILDING_CANCEL_BACK, set_CITY_BUILDING_CANCEL_BACK);
		L.RegVar("BUY_MONEY_UNIT_COST", get_BUY_MONEY_UNIT_COST, set_BUY_MONEY_UNIT_COST);
		L.RegVar("BUY_WOOD_UNIT_COST", get_BUY_WOOD_UNIT_COST, set_BUY_WOOD_UNIT_COST);
		L.RegVar("BUY_STONE_UNIT_COST", get_BUY_STONE_UNIT_COST, set_BUY_STONE_UNIT_COST);
		L.RegVar("MIN_ACCOUNT_SIZE", get_MIN_ACCOUNT_SIZE, set_MIN_ACCOUNT_SIZE);
		L.RegVar("MAX_ACCOUNT_SIZE", get_MAX_ACCOUNT_SIZE, set_MAX_ACCOUNT_SIZE);
		L.RegVar("MIN_PASSWORD_SIZE", get_MIN_PASSWORD_SIZE, set_MIN_PASSWORD_SIZE);
		L.RegVar("MAX_PASSWORD_SIZE", get_MAX_PASSWORD_SIZE, set_MAX_PASSWORD_SIZE);
		L.RegVar("MIN_NAME_SIZE", get_MIN_NAME_SIZE, set_MIN_NAME_SIZE);
		L.RegVar("MAX_NAME_SIZE", get_MAX_NAME_SIZE, set_MAX_NAME_SIZE);
		L.RegVar("ITEM_CONFIG_ID_MONEY", get_ITEM_CONFIG_ID_MONEY, set_ITEM_CONFIG_ID_MONEY);
		L.RegVar("ITEM_CONFIG_ID_WOOD", get_ITEM_CONFIG_ID_WOOD, set_ITEM_CONFIG_ID_WOOD);
		L.RegVar("ITEM_CONFIG_ID_STONE", get_ITEM_CONFIG_ID_STONE, set_ITEM_CONFIG_ID_STONE);
		L.RegVar("ITEM_CONFIG_ID_GOLD", get_ITEM_CONFIG_ID_GOLD, set_ITEM_CONFIG_ID_GOLD);
		L.RegVar("ITEM_CONFIG_ID_EXP_1", get_ITEM_CONFIG_ID_EXP_1, set_ITEM_CONFIG_ID_EXP_1);
		L.RegVar("ITEM_CONFIG_ID_EXP_2", get_ITEM_CONFIG_ID_EXP_2, set_ITEM_CONFIG_ID_EXP_2);
		L.RegVar("ITEM_CONFIG_ID_EXP_3", get_ITEM_CONFIG_ID_EXP_3, set_ITEM_CONFIG_ID_EXP_3);
		L.RegVar("ITEM_CONFIG_ID_EXP_4", get_ITEM_CONFIG_ID_EXP_4, set_ITEM_CONFIG_ID_EXP_4);
		L.RegVar("ITEM_CONFIG_ID_EXP_5", get_ITEM_CONFIG_ID_EXP_5, set_ITEM_CONFIG_ID_EXP_5);
		L.RegVar("BUY_SP_COST", get_BUY_SP_COST, set_BUY_SP_COST);
		L.RegVar("BUY_SP_GET", get_BUY_SP_GET, set_BUY_SP_GET);
		L.RegVar("PRODUCE_REWARD_INTERVAL", get_PRODUCE_REWARD_INTERVAL, set_PRODUCE_REWARD_INTERVAL);
		L.RegVar("WORLD_CITY_REFRESH_TIME", get_WORLD_CITY_REFRESH_TIME, set_WORLD_CITY_REFRESH_TIME);
		L.RegVar("WORLD_RES_TOWN_CONQUER_TIME", get_WORLD_RES_TOWN_CONQUER_TIME, set_WORLD_RES_TOWN_CONQUER_TIME);
		L.RegVar("SP_GET_INTERVAL", get_SP_GET_INTERVAL, set_SP_GET_INTERVAL);
		L.RegVar("LUCK_DRAW_MAX_FREE_COUNT", get_LUCK_DRAW_MAX_FREE_COUNT, set_LUCK_DRAW_MAX_FREE_COUNT);
		L.RegVar("LUCK_DRAW_MONEY_FREE_CD", get_LUCK_DRAW_MONEY_FREE_CD, set_LUCK_DRAW_MONEY_FREE_CD);
		L.RegVar("LUCK_DRAW_GOLD_COUNT", get_LUCK_DRAW_GOLD_COUNT, set_LUCK_DRAW_GOLD_COUNT);
		L.RegVar("LUCK_DRAW_GOLD_FREE_CD", get_LUCK_DRAW_GOLD_FREE_CD, set_LUCK_DRAW_GOLD_FREE_CD);
		L.RegVar("LUCK_DRAW_MONEY_1_COST", get_LUCK_DRAW_MONEY_1_COST, set_LUCK_DRAW_MONEY_1_COST);
		L.RegVar("LUCK_DRAW_MONEY_10_COST", get_LUCK_DRAW_MONEY_10_COST, set_LUCK_DRAW_MONEY_10_COST);
		L.RegVar("LUCK_DRAW_GOLD_1_COST", get_LUCK_DRAW_GOLD_1_COST, set_LUCK_DRAW_GOLD_1_COST);
		L.RegVar("LUCK_DRAW_GOLD_10_COST", get_LUCK_DRAW_GOLD_10_COST, set_LUCK_DRAW_GOLD_10_COST);
		L.RegVar("LUCK_DRAW_MONEY_ITEM_ID", get_LUCK_DRAW_MONEY_ITEM_ID, set_LUCK_DRAW_MONEY_ITEM_ID);
		L.RegVar("LUCK_DRAW_GOLD_ITEM_ID", get_LUCK_DRAW_GOLD_ITEM_ID, set_LUCK_DRAW_GOLD_ITEM_ID);
		L.RegVar("PVE_MAX_QUICK_FIGHT_COUNT", get_PVE_MAX_QUICK_FIGHT_COUNT, set_PVE_MAX_QUICK_FIGHT_COUNT);
		L.RegVar("PVE_RESET_FIGHT_COUNT_COST", get_PVE_RESET_FIGHT_COUNT_COST, set_PVE_RESET_FIGHT_COUNT_COST);
		L.RegVar("PVP_GOLD_PER_ATTACK_COUNT", get_PVP_GOLD_PER_ATTACK_COUNT, set_PVP_GOLD_PER_ATTACK_COUNT);
		L.RegVar("PVP_MAX_ATTACK_COUNT", get_PVP_MAX_ATTACK_COUNT, set_PVP_MAX_ATTACK_COUNT);
		L.RegVar("PVP_SCORE_WIN_ADD", get_PVP_SCORE_WIN_ADD, set_PVP_SCORE_WIN_ADD);
		L.RegVar("PVP_SCORE_LOSE_ADD", get_PVP_SCORE_LOSE_ADD, set_PVP_SCORE_LOSE_ADD);
		L.RegVar("SHOP_REFRESH_COST", get_SHOP_REFRESH_COST, set_SHOP_REFRESH_COST);
		L.RegVar("SHOP_REFRESH_MULTIPLE", get_SHOP_REFRESH_MULTIPLE, set_SHOP_REFRESH_MULTIPLE);
		L.RegVar("MAIL_MAX_COST", get_MAIL_MAX_COST, set_MAIL_MAX_COST);
		L.RegVar("CHANGE_NAME_COST", get_CHANGE_NAME_COST, set_CHANGE_NAME_COST);
		L.RegVar("SERVER_IP", get_SERVER_IP, set_SERVER_IP);
		L.RegVar("SERVER_PORT", get_SERVER_PORT, set_SERVER_PORT);
		L.RegVar("LOCAL_PATH", get_LOCAL_PATH, null);
		L.RegVar("VERSION_FILE", get_VERSION_FILE, null);
		L.RegVar("FILE_LIST", get_FILE_LIST, null);
		L.RegVar("ASSETBUNDLE", get_ASSETBUNDLE, null);
		L.RegVar("ResourceListPath", get_ResourceListPath, set_ResourceListPath);
		L.RegVar("DefaultAssetBundle", get_DefaultAssetBundle, set_DefaultAssetBundle);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGameConfig(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				GameConfig obj = new GameConfig();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: GameConfig.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GAME_TIME(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.GAME_TIME);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DOUBLE_TIME(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.DOUBLE_TIME);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OVER_TIME(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.OVER_TIME);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MAX_CARD_COUNT(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.MAX_CARD_COUNT);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MAX_HANDCARD_COUNT(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.MAX_HANDCARD_COUNT);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GRID_CELL_X(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.GRID_CELL_X);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GRID_CELL_Y(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.GRID_CELL_Y);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FRAME_INTERVAL(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.FRAME_INTERVAL);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_START_MANA(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.START_MANA);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MANA_REGEN(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.MANA_REGEN);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MANA_MUL(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.MANA_MUL);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MANA_MAX(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.MANA_MAX);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HP_LVL_MUL(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, GameConfig.HP_LVL_MUL);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ATK_LVL_MUL(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, GameConfig.ATK_LVL_MUL);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_KING_TOWER_ID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.KING_TOWER_ID);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TOWER_ID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.TOWER_ID);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MIRROR_ID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.MIRROR_ID);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BASE_HERO_ID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.BASE_HERO_ID);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ARRIVE_DISTANCE(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, GameConfig.ARRIVE_DISTANCE);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ATTACK_INTERVAL(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, GameConfig.ATTACK_INTERVAL);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MAX_PVE_HERO_COUNT(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.MAX_PVE_HERO_COUNT);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MAX_HERO_STAR(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.MAX_HERO_STAR);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MAX_HERO_QUALITY(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.MAX_HERO_QUALITY);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MAX_SKILL_POINT(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.MAX_SKILL_POINT);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SKILL_POINT_GET_INTERVAL(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.SKILL_POINT_GET_INTERVAL);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SKILL_UNLOCK2(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.SKILL_UNLOCK2);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SKILL_UNLOCK3(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.SKILL_UNLOCK3);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SKILL_UNLOCK4(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.SKILL_UNLOCK4);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SCREEN_WIDTH(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.SCREEN_WIDTH);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SCREEN_HEIGHT(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.SCREEN_HEIGHT);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_QUICK_LEVELUP_GOLD(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.QUICK_LEVELUP_GOLD);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_QUICK_LEVELUP_TIME(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.QUICK_LEVELUP_TIME);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_QUICK_LEVELUP_FREE_TIME(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.QUICK_LEVELUP_FREE_TIME);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CITY_BUILDING_CANCEL_BACK(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, GameConfig.CITY_BUILDING_CANCEL_BACK);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BUY_MONEY_UNIT_COST(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.BUY_MONEY_UNIT_COST);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BUY_WOOD_UNIT_COST(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.BUY_WOOD_UNIT_COST);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BUY_STONE_UNIT_COST(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.BUY_STONE_UNIT_COST);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MIN_ACCOUNT_SIZE(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.MIN_ACCOUNT_SIZE);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MAX_ACCOUNT_SIZE(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.MAX_ACCOUNT_SIZE);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MIN_PASSWORD_SIZE(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.MIN_PASSWORD_SIZE);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MAX_PASSWORD_SIZE(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.MAX_PASSWORD_SIZE);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MIN_NAME_SIZE(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.MIN_NAME_SIZE);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MAX_NAME_SIZE(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.MAX_NAME_SIZE);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ITEM_CONFIG_ID_MONEY(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.ITEM_CONFIG_ID_MONEY);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ITEM_CONFIG_ID_WOOD(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.ITEM_CONFIG_ID_WOOD);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ITEM_CONFIG_ID_STONE(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.ITEM_CONFIG_ID_STONE);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ITEM_CONFIG_ID_GOLD(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.ITEM_CONFIG_ID_GOLD);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ITEM_CONFIG_ID_EXP_1(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.ITEM_CONFIG_ID_EXP_1);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ITEM_CONFIG_ID_EXP_2(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.ITEM_CONFIG_ID_EXP_2);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ITEM_CONFIG_ID_EXP_3(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.ITEM_CONFIG_ID_EXP_3);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ITEM_CONFIG_ID_EXP_4(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.ITEM_CONFIG_ID_EXP_4);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ITEM_CONFIG_ID_EXP_5(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.ITEM_CONFIG_ID_EXP_5);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BUY_SP_COST(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.BUY_SP_COST);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BUY_SP_GET(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.BUY_SP_GET);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PRODUCE_REWARD_INTERVAL(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.PRODUCE_REWARD_INTERVAL);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WORLD_CITY_REFRESH_TIME(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.WORLD_CITY_REFRESH_TIME);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WORLD_RES_TOWN_CONQUER_TIME(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.WORLD_RES_TOWN_CONQUER_TIME);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SP_GET_INTERVAL(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.SP_GET_INTERVAL);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LUCK_DRAW_MAX_FREE_COUNT(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.LUCK_DRAW_MAX_FREE_COUNT);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LUCK_DRAW_MONEY_FREE_CD(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, GameConfig.LUCK_DRAW_MONEY_FREE_CD);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LUCK_DRAW_GOLD_COUNT(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.LUCK_DRAW_GOLD_COUNT);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LUCK_DRAW_GOLD_FREE_CD(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, GameConfig.LUCK_DRAW_GOLD_FREE_CD);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LUCK_DRAW_MONEY_1_COST(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.LUCK_DRAW_MONEY_1_COST);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LUCK_DRAW_MONEY_10_COST(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.LUCK_DRAW_MONEY_10_COST);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LUCK_DRAW_GOLD_1_COST(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.LUCK_DRAW_GOLD_1_COST);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LUCK_DRAW_GOLD_10_COST(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.LUCK_DRAW_GOLD_10_COST);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LUCK_DRAW_MONEY_ITEM_ID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.LUCK_DRAW_MONEY_ITEM_ID);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LUCK_DRAW_GOLD_ITEM_ID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.LUCK_DRAW_GOLD_ITEM_ID);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PVE_MAX_QUICK_FIGHT_COUNT(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.PVE_MAX_QUICK_FIGHT_COUNT);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PVE_RESET_FIGHT_COUNT_COST(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.PVE_RESET_FIGHT_COUNT_COST);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PVP_GOLD_PER_ATTACK_COUNT(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.PVP_GOLD_PER_ATTACK_COUNT);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PVP_MAX_ATTACK_COUNT(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.PVP_MAX_ATTACK_COUNT);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PVP_SCORE_WIN_ADD(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.PVP_SCORE_WIN_ADD);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PVP_SCORE_LOSE_ADD(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.PVP_SCORE_LOSE_ADD);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SHOP_REFRESH_COST(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.SHOP_REFRESH_COST);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SHOP_REFRESH_MULTIPLE(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.SHOP_REFRESH_MULTIPLE);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MAIL_MAX_COST(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.MAIL_MAX_COST);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CHANGE_NAME_COST(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.CHANGE_NAME_COST);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SERVER_IP(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameConfig.SERVER_IP);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SERVER_PORT(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameConfig.SERVER_PORT);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LOCAL_PATH(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameConfig.LOCAL_PATH);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_VERSION_FILE(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameConfig.VERSION_FILE);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FILE_LIST(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameConfig.FILE_LIST);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ASSETBUNDLE(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameConfig.ASSETBUNDLE);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ResourceListPath(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameConfig.ResourceListPath);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DefaultAssetBundle(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, GameConfig.DefaultAssetBundle);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GAME_TIME(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.GAME_TIME = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DOUBLE_TIME(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.DOUBLE_TIME = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OVER_TIME(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.OVER_TIME = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MAX_CARD_COUNT(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.MAX_CARD_COUNT = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MAX_HANDCARD_COUNT(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.MAX_HANDCARD_COUNT = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GRID_CELL_X(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.GRID_CELL_X = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GRID_CELL_Y(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.GRID_CELL_Y = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_FRAME_INTERVAL(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.FRAME_INTERVAL = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_START_MANA(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.START_MANA = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MANA_REGEN(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.MANA_REGEN = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MANA_MUL(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.MANA_MUL = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MANA_MAX(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.MANA_MAX = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_HP_LVL_MUL(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.HP_LVL_MUL = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ATK_LVL_MUL(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.ATK_LVL_MUL = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_KING_TOWER_ID(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.KING_TOWER_ID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TOWER_ID(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.TOWER_ID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MIRROR_ID(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.MIRROR_ID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BASE_HERO_ID(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.BASE_HERO_ID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ARRIVE_DISTANCE(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.ARRIVE_DISTANCE = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ATTACK_INTERVAL(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.ATTACK_INTERVAL = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MAX_PVE_HERO_COUNT(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.MAX_PVE_HERO_COUNT = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MAX_HERO_STAR(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.MAX_HERO_STAR = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MAX_HERO_QUALITY(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.MAX_HERO_QUALITY = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MAX_SKILL_POINT(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.MAX_SKILL_POINT = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SKILL_POINT_GET_INTERVAL(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.SKILL_POINT_GET_INTERVAL = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SKILL_UNLOCK2(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.SKILL_UNLOCK2 = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SKILL_UNLOCK3(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.SKILL_UNLOCK3 = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SKILL_UNLOCK4(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.SKILL_UNLOCK4 = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SCREEN_WIDTH(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.SCREEN_WIDTH = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SCREEN_HEIGHT(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.SCREEN_HEIGHT = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_QUICK_LEVELUP_GOLD(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.QUICK_LEVELUP_GOLD = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_QUICK_LEVELUP_TIME(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.QUICK_LEVELUP_TIME = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_QUICK_LEVELUP_FREE_TIME(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.QUICK_LEVELUP_FREE_TIME = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CITY_BUILDING_CANCEL_BACK(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.CITY_BUILDING_CANCEL_BACK = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BUY_MONEY_UNIT_COST(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.BUY_MONEY_UNIT_COST = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BUY_WOOD_UNIT_COST(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.BUY_WOOD_UNIT_COST = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BUY_STONE_UNIT_COST(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.BUY_STONE_UNIT_COST = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MIN_ACCOUNT_SIZE(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.MIN_ACCOUNT_SIZE = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MAX_ACCOUNT_SIZE(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.MAX_ACCOUNT_SIZE = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MIN_PASSWORD_SIZE(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.MIN_PASSWORD_SIZE = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MAX_PASSWORD_SIZE(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.MAX_PASSWORD_SIZE = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MIN_NAME_SIZE(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.MIN_NAME_SIZE = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MAX_NAME_SIZE(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.MAX_NAME_SIZE = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ITEM_CONFIG_ID_MONEY(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.ITEM_CONFIG_ID_MONEY = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ITEM_CONFIG_ID_WOOD(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.ITEM_CONFIG_ID_WOOD = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ITEM_CONFIG_ID_STONE(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.ITEM_CONFIG_ID_STONE = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ITEM_CONFIG_ID_GOLD(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.ITEM_CONFIG_ID_GOLD = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ITEM_CONFIG_ID_EXP_1(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.ITEM_CONFIG_ID_EXP_1 = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ITEM_CONFIG_ID_EXP_2(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.ITEM_CONFIG_ID_EXP_2 = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ITEM_CONFIG_ID_EXP_3(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.ITEM_CONFIG_ID_EXP_3 = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ITEM_CONFIG_ID_EXP_4(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.ITEM_CONFIG_ID_EXP_4 = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ITEM_CONFIG_ID_EXP_5(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.ITEM_CONFIG_ID_EXP_5 = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BUY_SP_COST(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.BUY_SP_COST = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BUY_SP_GET(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.BUY_SP_GET = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PRODUCE_REWARD_INTERVAL(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.PRODUCE_REWARD_INTERVAL = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_WORLD_CITY_REFRESH_TIME(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.WORLD_CITY_REFRESH_TIME = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_WORLD_RES_TOWN_CONQUER_TIME(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.WORLD_RES_TOWN_CONQUER_TIME = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SP_GET_INTERVAL(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.SP_GET_INTERVAL = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LUCK_DRAW_MAX_FREE_COUNT(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.LUCK_DRAW_MAX_FREE_COUNT = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LUCK_DRAW_MONEY_FREE_CD(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.LUCK_DRAW_MONEY_FREE_CD = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LUCK_DRAW_GOLD_COUNT(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.LUCK_DRAW_GOLD_COUNT = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LUCK_DRAW_GOLD_FREE_CD(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.LUCK_DRAW_GOLD_FREE_CD = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LUCK_DRAW_MONEY_1_COST(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.LUCK_DRAW_MONEY_1_COST = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LUCK_DRAW_MONEY_10_COST(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.LUCK_DRAW_MONEY_10_COST = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LUCK_DRAW_GOLD_1_COST(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.LUCK_DRAW_GOLD_1_COST = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LUCK_DRAW_GOLD_10_COST(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.LUCK_DRAW_GOLD_10_COST = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LUCK_DRAW_MONEY_ITEM_ID(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.LUCK_DRAW_MONEY_ITEM_ID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LUCK_DRAW_GOLD_ITEM_ID(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.LUCK_DRAW_GOLD_ITEM_ID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PVE_MAX_QUICK_FIGHT_COUNT(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.PVE_MAX_QUICK_FIGHT_COUNT = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PVE_RESET_FIGHT_COUNT_COST(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.PVE_RESET_FIGHT_COUNT_COST = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PVP_GOLD_PER_ATTACK_COUNT(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.PVP_GOLD_PER_ATTACK_COUNT = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PVP_MAX_ATTACK_COUNT(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.PVP_MAX_ATTACK_COUNT = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PVP_SCORE_WIN_ADD(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.PVP_SCORE_WIN_ADD = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PVP_SCORE_LOSE_ADD(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.PVP_SCORE_LOSE_ADD = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SHOP_REFRESH_COST(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.SHOP_REFRESH_COST = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SHOP_REFRESH_MULTIPLE(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.SHOP_REFRESH_MULTIPLE = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MAIL_MAX_COST(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.MAIL_MAX_COST = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CHANGE_NAME_COST(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.CHANGE_NAME_COST = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SERVER_IP(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameConfig.SERVER_IP = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SERVER_PORT(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameConfig.SERVER_PORT = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ResourceListPath(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameConfig.ResourceListPath = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DefaultAssetBundle(IntPtr L)
	{
		try
		{
			System.Collections.Generic.List<string> arg0 = (System.Collections.Generic.List<string>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<string>));
			GameConfig.DefaultAssetBundle = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

